// Code generated by github.com/alanctgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     AnyArray.avsc
 *     ArrayOfBoolean.avsc
 *     ArrayOfDouble.avsc
 *     ArrayOfFloat.avsc
 *     ArrayOfInt.avsc
 *     ArrayOfLong.avsc
 *     ChannelIndexTypes.avsc
 *     ChannelMetadataRecord.avsc
 *     ChannelRangeInfo.avsc
 *     ChannelStatuses.avsc
 *     ChannelStreamingInfo.avsc
 *     DataFrame.avsc
 *     DataItem.avsc
 *     IndexDirections.avsc
 *     IndexMetadataRecord.avsc
 *     Roles.avsc
 *     StreamingStartIndex.avsc
 *     Contact.avsc
 *     DataAttribute.avsc
 *     DataValue.avsc
 *     MessageHeader.avsc
 *     DataObject.avsc
 *     GrowingObjectIndex.avsc
 *     NotificationRequestRecord.avsc
 *     ObjectChange.avsc
 *     ObjectChangeTypes.avsc
 *     Resource.avsc
 *     Protocols.avsc
 *     ServerCapabilities.avsc
 *     SupportedProtocol.avsc
 *     Version.avsc
 *     ChannelDataFrameSet.avsc
 *     ChannelMetadata.avsc
 *     RequestChannelData.avsc
 *     ChannelData.avsc
 *     ChannelDataChange.avsc
 *     ChannelDescribe.avsc
 *     ChannelMetadata.avsc
 *     ChannelRangeRequest.avsc
 *     ChannelRemove.avsc
 *     ChannelStatusChange.avsc
 *     ChannelStreamingStart.avsc
 *     ChannelStreamingStop.avsc
 *     Start.avsc
 *     Acknowledge.avsc
 *     CloseSession.avsc
 *     OpenSession.avsc
 *     ProtocolException.avsc
 *     RenewSecurityToken.avsc
 *     RequestSession.avsc
 *     DataArray.avsc
 *     GetDataArray.avsc
 *     GetDataArraySlice.avsc
 *     PutDataArray.avsc
 *     PutDataArraySlice.avsc
 *     GetResources.avsc
 *     GetResourcesResponse.avsc
 *     GrowingObjectDelete.avsc
 *     GrowingObjectDeleteRange.avsc
 *     GrowingObjectGet.avsc
 *     GrowingObjectGetRange.avsc
 *     GrowingObjectPut.avsc
 *     ObjectFragment.avsc
 *     DeleteObject.avsc
 *     GetObject.avsc
 *     Object.avsc
 *     PutObject.avsc
 *     CancelNotification.avsc
 *     ChangeNotification.avsc
 *     DeleteNotification.avsc
 *     NotificationRequest.avsc
 *     WMLS_AddToStore.avsc
 *     WMLS_DeleteFromStore.avsc
 *     WMLS_GetBaseMsg.avsc
 *     WMLS_GetCap.avsc
 *     WMLS_GetFromStore.avsc
 *     WMLS_GetVersion.avsc
 *     WMLS_UpdateInStore.avsc
 *     WMSL_AddToStoreResponse.avsc
 *     WMSL_DeleteFromStoreResponse.avsc
 *     WMSL_GetBaseMsgResponse.avsc
 *     WMSL_GetCapResponse.avsc
 *     WMSL_GetFromStoreResponse.avsc
 *     WMSL_GetVersionResponse.avsc
 *     WMSL_UpdateInStoreResponse.avsc
 */

package energistics

import (
	"encoding/binary"
	"fmt"
	"io"
	"math"
)

type ByteReader interface {
	ReadByte() (byte, error)
}

type ByteWriter interface {
	Grow(int)
	WriteByte(byte) error
}

type StringWriter interface {
	WriteString(string) (int, error)
}

func encodeFloat(w io.Writer, byteCount int, bits uint64) error {
	var err error
	var bb []byte
	bw, ok := w.(ByteWriter)
	if ok {
		bw.Grow(byteCount)
	} else {
		bb = make([]byte, 0, byteCount)
	}
	for i := 0; i < byteCount; i++ {
		if bw != nil {
			err = bw.WriteByte(byte(bits & 255))
			if err != nil {
				return err
			}
		} else {
			bb = append(bb, byte(bits&255))
		}
		bits = bits >> 8
	}
	if bw == nil {
		_, err = w.Write(bb)
		return err
	}
	return nil
}

func encodeInt(w io.Writer, byteCount int, encoded uint64) error {
	var err error
	var bb []byte
	bw, ok := w.(ByteWriter)
	// To avoid reallocations, grow capacity to the largest possible size
	// for this integer
	if ok {
		bw.Grow(byteCount)
	} else {
		bb = make([]byte, 0, byteCount)
	}

	if encoded == 0 {
		if bw != nil {
			err = bw.WriteByte(0)
			if err != nil {
				return err
			}
		} else {
			bb = append(bb, byte(0))
		}
	} else {
		for encoded > 0 {
			b := byte(encoded & 127)
			encoded = encoded >> 7
			if !(encoded == 0) {
				b |= 128
			}
			if bw != nil {
				err = bw.WriteByte(b)
				if err != nil {
					return err
				}
			} else {
				bb = append(bb, b)
			}
		}
	}
	if bw == nil {
		_, err := w.Write(bb)
		return err
	}
	return nil

}

func readAcknowledge(r io.Reader) (*Acknowledge, error) {
	var str = &Acknowledge{}
	//var err error

	return str, nil
}

func readAnyArray(r io.Reader) (*AnyArray, error) {
	var str = &AnyArray{}
	var err error
	str.Item, err = readUnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readArrayBool(r io.Reader) ([]bool, error) {
	var err error
	var blkSize int64
	var arr = make([]bool, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readBool(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayChannelMetadataRecord(r io.Reader) ([]*ChannelMetadataRecord, error) {
	var err error
	var blkSize int64
	var arr = make([]*ChannelMetadataRecord, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readChannelMetadataRecord(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayChannelRangeInfo(r io.Reader) ([]*ChannelRangeInfo, error) {
	var err error
	var blkSize int64
	var arr = make([]*ChannelRangeInfo, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readChannelRangeInfo(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayChannelStreamingInfo(r io.Reader) ([]*ChannelStreamingInfo, error) {
	var err error
	var blkSize int64
	var arr = make([]*ChannelStreamingInfo, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readChannelStreamingInfo(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayDataAttribute(r io.Reader) ([]*DataAttribute, error) {
	var err error
	var blkSize int64
	var arr = make([]*DataAttribute, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readDataAttribute(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayDataFrame(r io.Reader) ([]*DataFrame, error) {
	var err error
	var blkSize int64
	var arr = make([]*DataFrame, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readDataFrame(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayDataItem(r io.Reader) ([]*DataItem, error) {
	var err error
	var blkSize int64
	var arr = make([]*DataItem, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readDataItem(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayDataValue(r io.Reader) ([]*DataValue, error) {
	var err error
	var blkSize int64
	var arr = make([]*DataValue, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readDataValue(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayDouble(r io.Reader) ([]float64, error) {
	var err error
	var blkSize int64
	var arr = make([]float64, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readDouble(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayFloat(r io.Reader) ([]float32, error) {
	var err error
	var blkSize int64
	var arr = make([]float32, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readFloat(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayIndexMetadataRecord(r io.Reader) ([]*IndexMetadataRecord, error) {
	var err error
	var blkSize int64
	var arr = make([]*IndexMetadataRecord, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readIndexMetadataRecord(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayInt(r io.Reader) ([]int32, error) {
	var err error
	var blkSize int64
	var arr = make([]int32, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readInt(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayLong(r io.Reader) ([]int64, error) {
	var err error
	var blkSize int64
	var arr = make([]int64, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readLong(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArrayOfBoolean(r io.Reader) (*ArrayOfBoolean, error) {
	var str = &ArrayOfBoolean{}
	var err error
	str.Values, err = readArrayBool(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readArrayOfDouble(r io.Reader) (*ArrayOfDouble, error) {
	var str = &ArrayOfDouble{}
	var err error
	str.Values, err = readArrayDouble(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readArrayOfFloat(r io.Reader) (*ArrayOfFloat, error) {
	var str = &ArrayOfFloat{}
	var err error
	str.Values, err = readArrayFloat(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readArrayOfInt(r io.Reader) (*ArrayOfInt, error) {
	var str = &ArrayOfInt{}
	var err error
	str.Values, err = readArrayInt(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readArrayOfLong(r io.Reader) (*ArrayOfLong, error) {
	var str = &ArrayOfLong{}
	var err error
	str.Values, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readArrayString(r io.Reader) ([]string, error) {
	var err error
	var blkSize int64
	var arr = make([]string, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readString(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readArraySupportedProtocol(r io.Reader) ([]*SupportedProtocol, error) {
	var err error
	var blkSize int64
	var arr = make([]*SupportedProtocol, 0)
	for {
		blkSize, err = readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err = readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			elem, err := readSupportedProtocol(r)
			if err != nil {
				return nil, err
			}
			arr = append(arr, elem)
		}
	}
	return arr, nil
}

func readBool(r io.Reader) (bool, error) {
	var b byte
	var err error
	if br, ok := r.(ByteReader); ok {
		b, err = br.ReadByte()
	} else {
		bs := make([]byte, 1)
		_, err = io.ReadFull(r, bs)
		if err != nil {
			return false, err
		}
		b = bs[0]
	}
	return b == 1, nil
}

func readBytes(r io.Reader) ([]byte, error) {
	size, err := readLong(r)
	if err != nil {
		return nil, err
	}
	bb := make([]byte, size)
	_, err = io.ReadFull(r, bb)
	return bb, err
}

func readCancelNotification(r io.Reader) (*CancelNotification, error) {
	var str = &CancelNotification{}
	var err error
	str.RequestUuid, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChangeNotification(r io.Reader) (*ChangeNotification, error) {
	var str = &ChangeNotification{}
	var err error
	str.Change, err = readObjectChange(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelData(r io.Reader) (*ChannelData, error) {
	var str = &ChannelData{}
	var err error
	str.Data, err = readArrayDataItem(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelDataChange(r io.Reader) (*ChannelDataChange, error) {
	var str = &ChannelDataChange{}
	var err error
	str.ChannelId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.StartIndex, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.EndIndex, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readArrayDataItem(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelDataFrameSet(r io.Reader) (*ChannelDataFrameSet, error) {
	var str = &ChannelDataFrameSet{}
	var err error
	str.Channels, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readArrayDataFrame(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelDescribe(r io.Reader) (*ChannelDescribe, error) {
	var str = &ChannelDescribe{}
	var err error
	str.Uris, err = readArrayString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelIndexTypes(r io.Reader) (ChannelIndexTypes, error) {
	val, err := readInt(r)
	return ChannelIndexTypes(val), err
}

func readChannelMetadata(r io.Reader) (*ChannelMetadata, error) {
	var str = &ChannelMetadata{}
	var err error
	str.Channels, err = readArrayChannelMetadataRecord(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelMetadataRecord(r io.Reader) (*ChannelMetadataRecord, error) {
	var str = &ChannelMetadataRecord{}
	var err error
	str.ChannelUri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ChannelId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.Indexes, err = readArrayIndexMetadataRecord(r)
	if err != nil {
		return nil, err
	}
	str.ChannelName, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.DataType, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Uom, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.StartIndex, err = readUnionNullLong(r)
	if err != nil {
		return nil, err
	}
	str.EndIndex, err = readUnionNullLong(r)
	if err != nil {
		return nil, err
	}
	str.Description, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Status, err = readChannelStatuses(r)
	if err != nil {
		return nil, err
	}
	str.ContentType, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.Source, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.MeasureClass, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Uuid, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.CustomData, err = readMapDataValue(r)
	if err != nil {
		return nil, err
	}
	str.DomainObject, err = readUnionNullDataObject(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelRangeInfo(r io.Reader) (*ChannelRangeInfo, error) {
	var str = &ChannelRangeInfo{}
	var err error
	str.ChannelId, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.StartIndex, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.EndIndex, err = readLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelRangeRequest(r io.Reader) (*ChannelRangeRequest, error) {
	var str = &ChannelRangeRequest{}
	var err error
	str.ChannelRanges, err = readArrayChannelRangeInfo(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelRemove(r io.Reader) (*ChannelRemove, error) {
	var str = &ChannelRemove{}
	var err error
	str.ChannelId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.RemoveReason, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelStatusChange(r io.Reader) (*ChannelStatusChange, error) {
	var str = &ChannelStatusChange{}
	var err error
	str.ChannelId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.Status, err = readChannelStatuses(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelStatuses(r io.Reader) (ChannelStatuses, error) {
	val, err := readInt(r)
	return ChannelStatuses(val), err
}

func readChannelStreamingInfo(r io.Reader) (*ChannelStreamingInfo, error) {
	var str = &ChannelStreamingInfo{}
	var err error
	str.ChannelId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.StartIndex, err = readStreamingStartIndex(r)
	if err != nil {
		return nil, err
	}
	str.ReceiveChangeNotification, err = readBool(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelStreamingStart(r io.Reader) (*ChannelStreamingStart, error) {
	var str = &ChannelStreamingStart{}
	var err error
	str.Channels, err = readArrayChannelStreamingInfo(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readChannelStreamingStop(r io.Reader) (*ChannelStreamingStop, error) {
	var str = &ChannelStreamingStop{}
	var err error
	str.Channels, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readCloseSession(r io.Reader) (*CloseSession, error) {
	var str = &CloseSession{}
	var err error
	str.Reason, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readContact(r io.Reader) (*Contact, error) {
	var str = &Contact{}
	var err error
	str.OrganizationName, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.ContactName, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.ContactPhone, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.ContactEmail, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDataArray(r io.Reader) (*DataArray, error) {
	var str = &DataArray{}
	var err error
	str.Dimensions, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readAnyArray(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDataAttribute(r io.Reader) (*DataAttribute, error) {
	var str = &DataAttribute{}
	var err error
	str.AttributeId, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.AttributeValue, err = readDataValue(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDataFrame(r io.Reader) (*DataFrame, error) {
	var str = &DataFrame{}
	var err error
	str.Index, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readArrayDataValue(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDataItem(r io.Reader) (*DataItem, error) {
	var str = &DataItem{}
	var err error
	str.Indexes, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.ChannelId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.Value, err = readDataValue(r)
	if err != nil {
		return nil, err
	}
	str.ValueAttributes, err = readArrayDataAttribute(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDataObject(r io.Reader) (*DataObject, error) {
	var str = &DataObject{}
	var err error
	str.Resource, err = readResource(r)
	if err != nil {
		return nil, err
	}
	str.ContentEncoding, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readBytes(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDataValue(r io.Reader) (*DataValue, error) {
	var str = &DataValue{}
	var err error
	str.Item, err = readUnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDeleteNotification(r io.Reader) (*DeleteNotification, error) {
	var str = &DeleteNotification{}
	var err error
	str.Delete, err = readObjectChange(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDeleteObject(r io.Reader) (*DeleteObject, error) {
	var str = &DeleteObject{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readDouble(r io.Reader) (float64, error) {
	buf := make([]byte, 8)
	_, err := io.ReadFull(r, buf)
	if err != nil {
		return 0, err
	}
	bits := binary.LittleEndian.Uint64(buf)
	val := math.Float64frombits(bits)
	return val, nil
}

func readFloat(r io.Reader) (float32, error) {
	buf := make([]byte, 4)
	_, err := io.ReadFull(r, buf)
	if err != nil {
		return 0, err
	}
	bits := binary.LittleEndian.Uint32(buf)
	val := math.Float32frombits(bits)
	return val, nil

}

func readGetDataArray(r io.Reader) (*GetDataArray, error) {
	var str = &GetDataArray{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGetDataArraySlice(r io.Reader) (*GetDataArraySlice, error) {
	var str = &GetDataArraySlice{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Start, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.Count, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGetObject(r io.Reader) (*GetObject, error) {
	var str = &GetObject{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGetResources(r io.Reader) (*GetResources, error) {
	var str = &GetResources{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGetResourcesResponse(r io.Reader) (*GetResourcesResponse, error) {
	var str = &GetResourcesResponse{}
	var err error
	str.Resource, err = readResource(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGrowingObjectDelete(r io.Reader) (*GrowingObjectDelete, error) {
	var str = &GrowingObjectDelete{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Uid, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGrowingObjectDeleteRange(r io.Reader) (*GrowingObjectDeleteRange, error) {
	var str = &GrowingObjectDeleteRange{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.StartIndex, err = readGrowingObjectIndex(r)
	if err != nil {
		return nil, err
	}
	str.EndIndex, err = readGrowingObjectIndex(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGrowingObjectGet(r io.Reader) (*GrowingObjectGet, error) {
	var str = &GrowingObjectGet{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Uid, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGrowingObjectGetRange(r io.Reader) (*GrowingObjectGetRange, error) {
	var str = &GrowingObjectGetRange{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.StartIndex, err = readGrowingObjectIndex(r)
	if err != nil {
		return nil, err
	}
	str.EndIndex, err = readGrowingObjectIndex(r)
	if err != nil {
		return nil, err
	}
	str.Uom, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.DepthDatum, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGrowingObjectIndex(r io.Reader) (*GrowingObjectIndex, error) {
	var str = &GrowingObjectIndex{}
	var err error
	str.Item, err = readUnionNullLongDouble(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readGrowingObjectPut(r io.Reader) (*GrowingObjectPut, error) {
	var str = &GrowingObjectPut{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ContentType, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ContentEncoding, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readBytes(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readIndexDirections(r io.Reader) (IndexDirections, error) {
	val, err := readInt(r)
	return IndexDirections(val), err
}

func readIndexMetadataRecord(r io.Reader) (*IndexMetadataRecord, error) {
	var str = &IndexMetadataRecord{}
	var err error
	str.IndexType, err = readChannelIndexTypes(r)
	if err != nil {
		return nil, err
	}
	str.Uom, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.DepthDatum, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.Direction, err = readIndexDirections(r)
	if err != nil {
		return nil, err
	}
	str.Mnemonic, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.Description, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.Uri, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.CustomData, err = readMapDataValue(r)
	if err != nil {
		return nil, err
	}
	str.Scale, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.TimeDatum, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readInt(r io.Reader) (int32, error) {
	var v int
	buf := make([]byte, 1)
	for shift := uint(0); ; shift += 7 {
		if _, err := io.ReadFull(r, buf); err != nil {
			return 0, err
		}
		b := buf[0]
		v |= int(b&127) << shift
		if b&128 == 0 {
			break
		}
	}
	datum := (int32(v>>1) ^ -int32(v&1))
	return datum, nil
}

func readLong(r io.Reader) (int64, error) {
	var v uint64
	buf := make([]byte, 1)
	for shift := uint(0); ; shift += 7 {
		if _, err := io.ReadFull(r, buf); err != nil {
			return 0, err
		}
		b := buf[0]
		v |= uint64(b&127) << shift
		if b&128 == 0 {
			break
		}
	}
	datum := (int64(v>>1) ^ -int64(v&1))
	return datum, nil
}

func readMapDataValue(r io.Reader) (map[string]*DataValue, error) {
	m := make(map[string]*DataValue)
	for {
		blkSize, err := readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err := readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			key, err := readString(r)
			if err != nil {
				return nil, err
			}
			val, err := readDataValue(r)
			if err != nil {
				return nil, err
			}
			m[key] = val
		}
	}
	return m, nil
}

func readMapString(r io.Reader) (map[string]string, error) {
	m := make(map[string]string)
	for {
		blkSize, err := readLong(r)
		if err != nil {
			return nil, err
		}
		if blkSize == 0 {
			break
		}
		if blkSize < 0 {
			blkSize = -blkSize
			_, err := readLong(r)
			if err != nil {
				return nil, err
			}
		}
		for i := int64(0); i < blkSize; i++ {
			key, err := readString(r)
			if err != nil {
				return nil, err
			}
			val, err := readString(r)
			if err != nil {
				return nil, err
			}
			m[key] = val
		}
	}
	return m, nil
}

func readMessageHeader(r io.Reader) (*MessageHeader, error) {
	var str = &MessageHeader{}
	var err error
	str.Protocol, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.MessageType, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.CorrelationId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.MessageId, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.MessageFlags, err = readInt(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readNotificationRequest(r io.Reader) (*NotificationRequest, error) {
	var str = &NotificationRequest{}
	var err error
	str.Request, err = readNotificationRequestRecord(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readNotificationRequestRecord(r io.Reader) (*NotificationRequestRecord, error) {
	var str = &NotificationRequestRecord{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Uuid, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.IncludeObjectData, err = readBool(r)
	if err != nil {
		return nil, err
	}
	str.StartTime, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.ObjectTypes, err = readArrayString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readNull(_ io.Reader) (interface{}, error) {
	return nil, nil
}

func readObject(r io.Reader) (*Object, error) {
	var str = &Object{}
	var err error
	str.DataObject, err = readDataObject(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readObjectChange(r io.Reader) (*ObjectChange, error) {
	var str = &ObjectChange{}
	var err error
	str.ChangeType, err = readObjectChangeTypes(r)
	if err != nil {
		return nil, err
	}
	str.ChangeTime, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.DataObject, err = readDataObject(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readObjectChangeTypes(r io.Reader) (ObjectChangeTypes, error) {
	val, err := readInt(r)
	return ObjectChangeTypes(val), err
}

func readObjectFragment(r io.Reader) (*ObjectFragment, error) {
	var str = &ObjectFragment{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ContentType, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ContentEncoding, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readBytes(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readOpenSession(r io.Reader) (*OpenSession, error) {
	var str = &OpenSession{}
	var err error
	str.ApplicationName, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ApplicationVersion, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.SessionId, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.SupportedProtocols, err = readArraySupportedProtocol(r)
	if err != nil {
		return nil, err
	}
	str.SupportedObjects, err = readArrayString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readProtocolException(r io.Reader) (*ProtocolException, error) {
	var str = &ProtocolException{}
	var err error
	str.ErrorCode, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.ErrorMessage, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readProtocols(r io.Reader) (Protocols, error) {
	val, err := readInt(r)
	return Protocols(val), err
}

func readPutDataArray(r io.Reader) (*PutDataArray, error) {
	var str = &PutDataArray{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readAnyArray(r)
	if err != nil {
		return nil, err
	}
	str.Dimensions, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readPutDataArraySlice(r io.Reader) (*PutDataArraySlice, error) {
	var str = &PutDataArraySlice{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Data, err = readAnyArray(r)
	if err != nil {
		return nil, err
	}
	str.Dimensions, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.Start, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}
	str.Count, err = readArrayLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readPutObject(r io.Reader) (*PutObject, error) {
	var str = &PutObject{}
	var err error
	str.DataObject, err = readDataObject(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readRenewSecurityToken(r io.Reader) (*RenewSecurityToken, error) {
	var str = &RenewSecurityToken{}
	var err error
	str.Token, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readRequestChannelData(r io.Reader) (*RequestChannelData, error) {
	var str = &RequestChannelData{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.FromIndex, err = readUnionNullLong(r)
	if err != nil {
		return nil, err
	}
	str.ToIndex, err = readUnionNullLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readRequestSession(r io.Reader) (*RequestSession, error) {
	var str = &RequestSession{}
	var err error
	str.ApplicationName, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ApplicationVersion, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.RequestedProtocols, err = readArraySupportedProtocol(r)
	if err != nil {
		return nil, err
	}
	str.SupportedObjects, err = readArrayString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readResource(r io.Reader) (*Resource, error) {
	var str = &Resource{}
	var err error
	str.Uri, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ContentType, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.Name, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ChannelSubscribable, err = readBool(r)
	if err != nil {
		return nil, err
	}
	str.CustomData, err = readMapString(r)
	if err != nil {
		return nil, err
	}
	str.ResourceType, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.HasChildren, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.Uuid, err = readUnionNullString(r)
	if err != nil {
		return nil, err
	}
	str.LastChanged, err = readLong(r)
	if err != nil {
		return nil, err
	}
	str.ObjectNotifiable, err = readBool(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readRoles(r io.Reader) (Roles, error) {
	val, err := readInt(r)
	return Roles(val), err
}

func readServerCapabilities(r io.Reader) (*ServerCapabilities, error) {
	var str = &ServerCapabilities{}
	var err error
	str.ApplicationName, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ApplicationVersion, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.SupportedProtocols, err = readArraySupportedProtocol(r)
	if err != nil {
		return nil, err
	}
	str.SupportedObjects, err = readArrayString(r)
	if err != nil {
		return nil, err
	}
	str.ContactInformation, err = readContact(r)
	if err != nil {
		return nil, err
	}
	str.SupportedEncodings, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readStart(r io.Reader) (*Start, error) {
	var str = &Start{}
	var err error
	str.MaxMessageRate, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.MaxDataItems, err = readInt(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readStreamingStartIndex(r io.Reader) (*StreamingStartIndex, error) {
	var str = &StreamingStartIndex{}
	var err error
	str.Item, err = readUnionNullIntLong(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readString(r io.Reader) (string, error) {
	len, err := readLong(r)
	if err != nil {
		return "", err
	}

	// makeslice can fail depending on available memory.
	// We arbitrarily limit string size to sane default (~2.2GB).
	if len < 0 || len > math.MaxInt32 {
		return "", fmt.Errorf("string length out of range: %d", len)
	}

	bb := make([]byte, len)
	_, err = io.ReadFull(r, bb)
	if err != nil {
		return "", err
	}
	return string(bb), nil
}

func readSupportedProtocol(r io.Reader) (*SupportedProtocol, error) {
	var str = &SupportedProtocol{}
	var err error
	str.Protocol, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.ProtocolVersion, err = readVersion(r)
	if err != nil {
		return nil, err
	}
	str.Role, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.ProtocolCapabilities, err = readMapDataValue(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readUnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble(r io.Reader) (UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble, error) {
	field, err := readLong(r)
	var unionStr UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfBoolean:
		val, err := readArrayOfBoolean(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.ArrayOfBoolean = val
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumBytes:
		val, err := readBytes(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Bytes = val
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfInt:
		val, err := readArrayOfInt(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.ArrayOfInt = val
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfLong:
		val, err := readArrayOfLong(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.ArrayOfLong = val
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfFloat:
		val, err := readArrayOfFloat(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.ArrayOfFloat = val
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfDouble:
		val, err := readArrayOfDouble(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.ArrayOfDouble = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble")
	}
	return unionStr, nil
}

func readUnionNullDataObject(r io.Reader) (UnionNullDataObject, error) {
	field, err := readLong(r)
	var unionStr UnionNullDataObject
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullDataObjectTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullDataObjectTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullDataObjectTypeEnumDataObject:
		val, err := readDataObject(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.DataObject = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullDataObject")
	}
	return unionStr, nil
}

func readUnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes(r io.Reader) (UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes, error) {
	field, err := readLong(r)
	var unionStr UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumDouble:
		val, err := readDouble(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Double = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumFloat:
		val, err := readFloat(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Float = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumInt:
		val, err := readInt(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Int = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumLong:
		val, err := readLong(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Long = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumString:
		val, err := readString(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.String = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumArrayOfDouble:
		val, err := readArrayOfDouble(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.ArrayOfDouble = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumBool:
		val, err := readBool(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Bool = val
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumBytes:
		val, err := readBytes(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Bytes = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes")
	}
	return unionStr, nil
}

func readUnionNullIntLong(r io.Reader) (UnionNullIntLong, error) {
	field, err := readLong(r)
	var unionStr UnionNullIntLong
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullIntLongTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullIntLongTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullIntLongTypeEnumInt:
		val, err := readInt(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Int = val
	case UnionNullIntLongTypeEnumLong:
		val, err := readLong(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Long = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullIntLong")
	}
	return unionStr, nil
}

func readUnionNullLong(r io.Reader) (UnionNullLong, error) {
	field, err := readLong(r)
	var unionStr UnionNullLong
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullLongTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullLongTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullLongTypeEnumLong:
		val, err := readLong(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Long = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullLong")
	}
	return unionStr, nil
}

func readUnionNullLongDouble(r io.Reader) (UnionNullLongDouble, error) {
	field, err := readLong(r)
	var unionStr UnionNullLongDouble
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullLongDoubleTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullLongDoubleTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullLongDoubleTypeEnumLong:
		val, err := readLong(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Long = val
	case UnionNullLongDoubleTypeEnumDouble:
		val, err := readDouble(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Double = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullLongDouble")
	}
	return unionStr, nil
}

func readUnionNullString(r io.Reader) (UnionNullString, error) {
	field, err := readLong(r)
	var unionStr UnionNullString
	if err != nil {
		return unionStr, err
	}
	unionStr.UnionType = UnionNullStringTypeEnum(field)
	switch unionStr.UnionType {
	case UnionNullStringTypeEnumNull:
		val, err := readNull(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.Null = val
	case UnionNullStringTypeEnumString:
		val, err := readString(r)
		if err != nil {
			return unionStr, err
		}
		unionStr.String = val

	default:
		return unionStr, fmt.Errorf("Invalid value for UnionNullString")
	}
	return unionStr, nil
}

func readVersion(r io.Reader) (*Version, error) {
	var str = &Version{}
	var err error
	str.Major, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.Minor, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.Revision, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.Patch, err = readInt(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMLS_AddToStore(r io.Reader) (*WMLS_AddToStore, error) {
	var str = &WMLS_AddToStore{}
	var err error
	str.WMLtypeIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.XMLin, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.OptionsIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.CapabilitiesIn, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMLS_DeleteFromStore(r io.Reader) (*WMLS_DeleteFromStore, error) {
	var str = &WMLS_DeleteFromStore{}
	var err error
	str.WMLtypeIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.XMLin, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.OptionsIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.CapabilitiesIn, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMLS_GetBaseMsg(r io.Reader) (*WMLS_GetBaseMsg, error) {
	var str = &WMLS_GetBaseMsg{}
	var err error
	str.ReturnValueIn, err = readInt(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMLS_GetCap(r io.Reader) (*WMLS_GetCap, error) {
	var str = &WMLS_GetCap{}
	var err error
	str.OptionsIn, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMLS_GetFromStore(r io.Reader) (*WMLS_GetFromStore, error) {
	var str = &WMLS_GetFromStore{}
	var err error
	str.WMLtypeIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.XMLin, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.OptionsIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.CapabilitiesIn, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMLS_GetVersion(r io.Reader) (*WMLS_GetVersion, error) {
	var str = &WMLS_GetVersion{}
	//var err error

	return str, nil
}

func readWMLS_UpdateInStore(r io.Reader) (*WMLS_UpdateInStore, error) {
	var str = &WMLS_UpdateInStore{}
	var err error
	str.WMLtypeIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.XMLin, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.OptionsIn, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.CapabilitiesIn, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_AddToStoreResponse(r io.Reader) (*WMSL_AddToStoreResponse, error) {
	var str = &WMSL_AddToStoreResponse{}
	var err error
	str.Result, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.SuppMsgOut, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_DeleteFromStoreResponse(r io.Reader) (*WMSL_DeleteFromStoreResponse, error) {
	var str = &WMSL_DeleteFromStoreResponse{}
	var err error
	str.Result, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.SuppMsgOut, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_GetBaseMsgResponse(r io.Reader) (*WMSL_GetBaseMsgResponse, error) {
	var str = &WMSL_GetBaseMsgResponse{}
	var err error
	str.Result, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_GetCapResponse(r io.Reader) (*WMSL_GetCapResponse, error) {
	var str = &WMSL_GetCapResponse{}
	var err error
	str.Result, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.CapabilitiesOut, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.SuppMsgOut, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_GetFromStoreResponse(r io.Reader) (*WMSL_GetFromStoreResponse, error) {
	var str = &WMSL_GetFromStoreResponse{}
	var err error
	str.Result, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.XMLout, err = readString(r)
	if err != nil {
		return nil, err
	}
	str.SuppMsgOut, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_GetVersionResponse(r io.Reader) (*WMSL_GetVersionResponse, error) {
	var str = &WMSL_GetVersionResponse{}
	var err error
	str.Result, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func readWMSL_UpdateInStoreResponse(r io.Reader) (*WMSL_UpdateInStoreResponse, error) {
	var str = &WMSL_UpdateInStoreResponse{}
	var err error
	str.Result, err = readInt(r)
	if err != nil {
		return nil, err
	}
	str.SuppMsgOut, err = readString(r)
	if err != nil {
		return nil, err
	}

	return str, nil
}

func writeAcknowledge(r *Acknowledge, w io.Writer) error {
	//var err error

	return nil
}
func writeAnyArray(r *AnyArray, w io.Writer) error {
	var err error
	err = writeUnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble(r.Item, w)
	if err != nil {
		return err
	}

	return nil
}

func writeArrayBool(r []bool, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeBool(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayChannelMetadataRecord(r []*ChannelMetadataRecord, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeChannelMetadataRecord(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayChannelRangeInfo(r []*ChannelRangeInfo, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeChannelRangeInfo(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayChannelStreamingInfo(r []*ChannelStreamingInfo, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeChannelStreamingInfo(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayDataAttribute(r []*DataAttribute, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeDataAttribute(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayDataFrame(r []*DataFrame, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeDataFrame(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayDataItem(r []*DataItem, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeDataItem(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayDataValue(r []*DataValue, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeDataValue(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayDouble(r []float64, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeDouble(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayFloat(r []float32, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeFloat(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayIndexMetadataRecord(r []*IndexMetadataRecord, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeIndexMetadataRecord(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayInt(r []int32, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeInt(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayLong(r []int64, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeLong(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArrayOfBoolean(r *ArrayOfBoolean, w io.Writer) error {
	var err error
	err = writeArrayBool(r.Values, w)
	if err != nil {
		return err
	}

	return nil
}
func writeArrayOfDouble(r *ArrayOfDouble, w io.Writer) error {
	var err error
	err = writeArrayDouble(r.Values, w)
	if err != nil {
		return err
	}

	return nil
}
func writeArrayOfFloat(r *ArrayOfFloat, w io.Writer) error {
	var err error
	err = writeArrayFloat(r.Values, w)
	if err != nil {
		return err
	}

	return nil
}
func writeArrayOfInt(r *ArrayOfInt, w io.Writer) error {
	var err error
	err = writeArrayInt(r.Values, w)
	if err != nil {
		return err
	}

	return nil
}
func writeArrayOfLong(r *ArrayOfLong, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Values, w)
	if err != nil {
		return err
	}

	return nil
}

func writeArrayString(r []string, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeString(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeArraySupportedProtocol(r []*SupportedProtocol, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeSupportedProtocol(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeBool(r bool, w io.Writer) error {
	var b byte
	if r {
		b = byte(1)
	}

	var err error
	if bw, ok := w.(ByteWriter); ok {
		err = bw.WriteByte(b)
	} else {
		bb := make([]byte, 1)
		bb[0] = b
		_, err = w.Write(bb)
	}
	if err != nil {
		return err
	}
	return nil
}

func writeBytes(r []byte, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil {
		return err
	}
	_, err = w.Write(r)
	return err
}

func writeCancelNotification(r *CancelNotification, w io.Writer) error {
	var err error
	err = writeString(r.RequestUuid, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChangeNotification(r *ChangeNotification, w io.Writer) error {
	var err error
	err = writeObjectChange(r.Change, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelData(r *ChannelData, w io.Writer) error {
	var err error
	err = writeArrayDataItem(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelDataChange(r *ChannelDataChange, w io.Writer) error {
	var err error
	err = writeLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeLong(r.StartIndex, w)
	if err != nil {
		return err
	}
	err = writeLong(r.EndIndex, w)
	if err != nil {
		return err
	}
	err = writeArrayDataItem(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelDataFrameSet(r *ChannelDataFrameSet, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Channels, w)
	if err != nil {
		return err
	}
	err = writeArrayDataFrame(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelDescribe(r *ChannelDescribe, w io.Writer) error {
	var err error
	err = writeArrayString(r.Uris, w)
	if err != nil {
		return err
	}

	return nil
}

func writeChannelIndexTypes(r ChannelIndexTypes, w io.Writer) error {
	return writeInt(int32(r), w)
}

func writeChannelMetadata(r *ChannelMetadata, w io.Writer) error {
	var err error
	err = writeArrayChannelMetadataRecord(r.Channels, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelMetadataRecord(r *ChannelMetadataRecord, w io.Writer) error {
	var err error
	err = writeString(r.ChannelUri, w)
	if err != nil {
		return err
	}
	err = writeLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeArrayIndexMetadataRecord(r.Indexes, w)
	if err != nil {
		return err
	}
	err = writeString(r.ChannelName, w)
	if err != nil {
		return err
	}
	err = writeString(r.DataType, w)
	if err != nil {
		return err
	}
	err = writeString(r.Uom, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.StartIndex, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EndIndex, w)
	if err != nil {
		return err
	}
	err = writeString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeChannelStatuses(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContentType, w)
	if err != nil {
		return err
	}
	err = writeString(r.Source, w)
	if err != nil {
		return err
	}
	err = writeString(r.MeasureClass, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Uuid, w)
	if err != nil {
		return err
	}
	err = writeMapDataValue(r.CustomData, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDataObject(r.DomainObject, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelRangeInfo(r *ChannelRangeInfo, w io.Writer) error {
	var err error
	err = writeArrayLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeLong(r.StartIndex, w)
	if err != nil {
		return err
	}
	err = writeLong(r.EndIndex, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelRangeRequest(r *ChannelRangeRequest, w io.Writer) error {
	var err error
	err = writeArrayChannelRangeInfo(r.ChannelRanges, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelRemove(r *ChannelRemove, w io.Writer) error {
	var err error
	err = writeLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemoveReason, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelStatusChange(r *ChannelStatusChange, w io.Writer) error {
	var err error
	err = writeLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeChannelStatuses(r.Status, w)
	if err != nil {
		return err
	}

	return nil
}

func writeChannelStatuses(r ChannelStatuses, w io.Writer) error {
	return writeInt(int32(r), w)
}

func writeChannelStreamingInfo(r *ChannelStreamingInfo, w io.Writer) error {
	var err error
	err = writeLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeStreamingStartIndex(r.StartIndex, w)
	if err != nil {
		return err
	}
	err = writeBool(r.ReceiveChangeNotification, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelStreamingStart(r *ChannelStreamingStart, w io.Writer) error {
	var err error
	err = writeArrayChannelStreamingInfo(r.Channels, w)
	if err != nil {
		return err
	}

	return nil
}
func writeChannelStreamingStop(r *ChannelStreamingStop, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Channels, w)
	if err != nil {
		return err
	}

	return nil
}
func writeCloseSession(r *CloseSession, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Reason, w)
	if err != nil {
		return err
	}

	return nil
}
func writeContact(r *Contact, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.OrganizationName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContactName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContactPhone, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContactEmail, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDataArray(r *DataArray, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Dimensions, w)
	if err != nil {
		return err
	}
	err = writeAnyArray(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDataAttribute(r *DataAttribute, w io.Writer) error {
	var err error
	err = writeInt(r.AttributeId, w)
	if err != nil {
		return err
	}
	err = writeDataValue(r.AttributeValue, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDataFrame(r *DataFrame, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Index, w)
	if err != nil {
		return err
	}
	err = writeArrayDataValue(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDataItem(r *DataItem, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Indexes, w)
	if err != nil {
		return err
	}
	err = writeLong(r.ChannelId, w)
	if err != nil {
		return err
	}
	err = writeDataValue(r.Value, w)
	if err != nil {
		return err
	}
	err = writeArrayDataAttribute(r.ValueAttributes, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDataObject(r *DataObject, w io.Writer) error {
	var err error
	err = writeResource(r.Resource, w)
	if err != nil {
		return err
	}
	err = writeString(r.ContentEncoding, w)
	if err != nil {
		return err
	}
	err = writeBytes(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDataValue(r *DataValue, w io.Writer) error {
	var err error
	err = writeUnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes(r.Item, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDeleteNotification(r *DeleteNotification, w io.Writer) error {
	var err error
	err = writeObjectChange(r.Delete, w)
	if err != nil {
		return err
	}

	return nil
}
func writeDeleteObject(r *DeleteObject, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}

	return nil
}

func writeDouble(r float64, w io.Writer) error {
	bits := uint64(math.Float64bits(r))
	const byteCount = 8
	return encodeFloat(w, byteCount, bits)
}

func writeFloat(r float32, w io.Writer) error {
	bits := uint64(math.Float32bits(r))
	const byteCount = 4
	return encodeFloat(w, byteCount, bits)
}

func writeGetDataArray(r *GetDataArray, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGetDataArraySlice(r *GetDataArraySlice, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.Start, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.Count, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGetObject(r *GetObject, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGetResources(r *GetResources, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGetResourcesResponse(r *GetResourcesResponse, w io.Writer) error {
	var err error
	err = writeResource(r.Resource, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGrowingObjectDelete(r *GrowingObjectDelete, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeString(r.Uid, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGrowingObjectDeleteRange(r *GrowingObjectDeleteRange, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeGrowingObjectIndex(r.StartIndex, w)
	if err != nil {
		return err
	}
	err = writeGrowingObjectIndex(r.EndIndex, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGrowingObjectGet(r *GrowingObjectGet, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeString(r.Uid, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGrowingObjectGetRange(r *GrowingObjectGetRange, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeGrowingObjectIndex(r.StartIndex, w)
	if err != nil {
		return err
	}
	err = writeGrowingObjectIndex(r.EndIndex, w)
	if err != nil {
		return err
	}
	err = writeString(r.Uom, w)
	if err != nil {
		return err
	}
	err = writeString(r.DepthDatum, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGrowingObjectIndex(r *GrowingObjectIndex, w io.Writer) error {
	var err error
	err = writeUnionNullLongDouble(r.Item, w)
	if err != nil {
		return err
	}

	return nil
}
func writeGrowingObjectPut(r *GrowingObjectPut, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeString(r.ContentType, w)
	if err != nil {
		return err
	}
	err = writeString(r.ContentEncoding, w)
	if err != nil {
		return err
	}
	err = writeBytes(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}

func writeIndexDirections(r IndexDirections, w io.Writer) error {
	return writeInt(int32(r), w)
}

func writeIndexMetadataRecord(r *IndexMetadataRecord, w io.Writer) error {
	var err error
	err = writeChannelIndexTypes(r.IndexType, w)
	if err != nil {
		return err
	}
	err = writeString(r.Uom, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DepthDatum, w)
	if err != nil {
		return err
	}
	err = writeIndexDirections(r.Direction, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mnemonic, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeMapDataValue(r.CustomData, w)
	if err != nil {
		return err
	}
	err = writeInt(r.Scale, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TimeDatum, w)
	if err != nil {
		return err
	}

	return nil
}

func writeInt(r int32, w io.Writer) error {
	downShift := uint32(31)
	encoded := uint64((uint32(r) << 1) ^ uint32(r>>downShift))
	const maxByteSize = 5
	return encodeInt(w, maxByteSize, encoded)
}

func writeLong(r int64, w io.Writer) error {
	downShift := uint64(63)
	encoded := uint64((r << 1) ^ (r >> downShift))
	const maxByteSize = 10
	return encodeInt(w, maxByteSize, encoded)
}

func writeMapDataValue(r map[string]*DataValue, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for k, e := range r {
		err = writeString(k, w)
		if err != nil {
			return err
		}
		err = writeDataValue(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeMapString(r map[string]string, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil || len(r) == 0 {
		return err
	}
	for k, e := range r {
		err = writeString(k, w)
		if err != nil {
			return err
		}
		err = writeString(e, w)
		if err != nil {
			return err
		}
	}
	return writeLong(0, w)
}

func writeMessageHeader(r *MessageHeader, w io.Writer) error {
	var err error
	err = writeInt(r.Protocol, w)
	if err != nil {
		return err
	}
	err = writeInt(r.MessageType, w)
	if err != nil {
		return err
	}
	err = writeLong(r.CorrelationId, w)
	if err != nil {
		return err
	}
	err = writeLong(r.MessageId, w)
	if err != nil {
		return err
	}
	err = writeInt(r.MessageFlags, w)
	if err != nil {
		return err
	}

	return nil
}
func writeNotificationRequest(r *NotificationRequest, w io.Writer) error {
	var err error
	err = writeNotificationRequestRecord(r.Request, w)
	if err != nil {
		return err
	}

	return nil
}
func writeNotificationRequestRecord(r *NotificationRequestRecord, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeString(r.Uuid, w)
	if err != nil {
		return err
	}
	err = writeBool(r.IncludeObjectData, w)
	if err != nil {
		return err
	}
	err = writeLong(r.StartTime, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.ObjectTypes, w)
	if err != nil {
		return err
	}

	return nil
}

func writeNull(_ interface{}, _ io.Writer) error {
	return nil
}

func writeObject(r *Object, w io.Writer) error {
	var err error
	err = writeDataObject(r.DataObject, w)
	if err != nil {
		return err
	}

	return nil
}
func writeObjectChange(r *ObjectChange, w io.Writer) error {
	var err error
	err = writeObjectChangeTypes(r.ChangeType, w)
	if err != nil {
		return err
	}
	err = writeLong(r.ChangeTime, w)
	if err != nil {
		return err
	}
	err = writeDataObject(r.DataObject, w)
	if err != nil {
		return err
	}

	return nil
}

func writeObjectChangeTypes(r ObjectChangeTypes, w io.Writer) error {
	return writeInt(int32(r), w)
}

func writeObjectFragment(r *ObjectFragment, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeString(r.ContentType, w)
	if err != nil {
		return err
	}
	err = writeString(r.ContentEncoding, w)
	if err != nil {
		return err
	}
	err = writeBytes(r.Data, w)
	if err != nil {
		return err
	}

	return nil
}
func writeOpenSession(r *OpenSession, w io.Writer) error {
	var err error
	err = writeString(r.ApplicationName, w)
	if err != nil {
		return err
	}
	err = writeString(r.ApplicationVersion, w)
	if err != nil {
		return err
	}
	err = writeString(r.SessionId, w)
	if err != nil {
		return err
	}
	err = writeArraySupportedProtocol(r.SupportedProtocols, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.SupportedObjects, w)
	if err != nil {
		return err
	}

	return nil
}
func writeProtocolException(r *ProtocolException, w io.Writer) error {
	var err error
	err = writeInt(r.ErrorCode, w)
	if err != nil {
		return err
	}
	err = writeString(r.ErrorMessage, w)
	if err != nil {
		return err
	}

	return nil
}

func writeProtocols(r Protocols, w io.Writer) error {
	return writeInt(int32(r), w)
}

func writePutDataArray(r *PutDataArray, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeAnyArray(r.Data, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.Dimensions, w)
	if err != nil {
		return err
	}

	return nil
}
func writePutDataArraySlice(r *PutDataArraySlice, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeAnyArray(r.Data, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.Dimensions, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.Start, w)
	if err != nil {
		return err
	}
	err = writeArrayLong(r.Count, w)
	if err != nil {
		return err
	}

	return nil
}
func writePutObject(r *PutObject, w io.Writer) error {
	var err error
	err = writeDataObject(r.DataObject, w)
	if err != nil {
		return err
	}

	return nil
}
func writeRenewSecurityToken(r *RenewSecurityToken, w io.Writer) error {
	var err error
	err = writeString(r.Token, w)
	if err != nil {
		return err
	}

	return nil
}
func writeRequestChannelData(r *RequestChannelData, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FromIndex, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ToIndex, w)
	if err != nil {
		return err
	}

	return nil
}
func writeRequestSession(r *RequestSession, w io.Writer) error {
	var err error
	err = writeString(r.ApplicationName, w)
	if err != nil {
		return err
	}
	err = writeString(r.ApplicationVersion, w)
	if err != nil {
		return err
	}
	err = writeArraySupportedProtocol(r.RequestedProtocols, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.SupportedObjects, w)
	if err != nil {
		return err
	}

	return nil
}
func writeResource(r *Resource, w io.Writer) error {
	var err error
	err = writeString(r.Uri, w)
	if err != nil {
		return err
	}
	err = writeString(r.ContentType, w)
	if err != nil {
		return err
	}
	err = writeString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeBool(r.ChannelSubscribable, w)
	if err != nil {
		return err
	}
	err = writeMapString(r.CustomData, w)
	if err != nil {
		return err
	}
	err = writeString(r.ResourceType, w)
	if err != nil {
		return err
	}
	err = writeInt(r.HasChildren, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Uuid, w)
	if err != nil {
		return err
	}
	err = writeLong(r.LastChanged, w)
	if err != nil {
		return err
	}
	err = writeBool(r.ObjectNotifiable, w)
	if err != nil {
		return err
	}

	return nil
}

func writeRoles(r Roles, w io.Writer) error {
	return writeInt(int32(r), w)
}

func writeServerCapabilities(r *ServerCapabilities, w io.Writer) error {
	var err error
	err = writeString(r.ApplicationName, w)
	if err != nil {
		return err
	}
	err = writeString(r.ApplicationVersion, w)
	if err != nil {
		return err
	}
	err = writeArraySupportedProtocol(r.SupportedProtocols, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.SupportedObjects, w)
	if err != nil {
		return err
	}
	err = writeContact(r.ContactInformation, w)
	if err != nil {
		return err
	}
	err = writeString(r.SupportedEncodings, w)
	if err != nil {
		return err
	}

	return nil
}
func writeStart(r *Start, w io.Writer) error {
	var err error
	err = writeInt(r.MaxMessageRate, w)
	if err != nil {
		return err
	}
	err = writeInt(r.MaxDataItems, w)
	if err != nil {
		return err
	}

	return nil
}
func writeStreamingStartIndex(r *StreamingStartIndex, w io.Writer) error {
	var err error
	err = writeUnionNullIntLong(r.Item, w)
	if err != nil {
		return err
	}

	return nil
}

func writeString(r string, w io.Writer) error {
	err := writeLong(int64(len(r)), w)
	if err != nil {
		return err
	}
	if sw, ok := w.(StringWriter); ok {
		_, err = sw.WriteString(r)
	} else {
		_, err = w.Write([]byte(r))
	}
	return err
}

func writeSupportedProtocol(r *SupportedProtocol, w io.Writer) error {
	var err error
	err = writeInt(r.Protocol, w)
	if err != nil {
		return err
	}
	err = writeVersion(r.ProtocolVersion, w)
	if err != nil {
		return err
	}
	err = writeString(r.Role, w)
	if err != nil {
		return err
	}
	err = writeMapDataValue(r.ProtocolCapabilities, w)
	if err != nil {
		return err
	}

	return nil
}

func writeUnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble(r UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfBoolean:
		return writeArrayOfBoolean(r.ArrayOfBoolean, w)
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumBytes:
		return writeBytes(r.Bytes, w)
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfInt:
		return writeArrayOfInt(r.ArrayOfInt, w)
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfLong:
		return writeArrayOfLong(r.ArrayOfLong, w)
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfFloat:
		return writeArrayOfFloat(r.ArrayOfFloat, w)
	case UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDoubleTypeEnumArrayOfDouble:
		return writeArrayOfDouble(r.ArrayOfDouble, w)

	}
	return fmt.Errorf("Invalid value for UnionNullArrayOfBooleanBytesArrayOfIntArrayOfLongArrayOfFloatArrayOfDouble")
}

func writeUnionNullDataObject(r UnionNullDataObject, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullDataObjectTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullDataObjectTypeEnumDataObject:
		return writeDataObject(r.DataObject, w)

	}
	return fmt.Errorf("Invalid value for UnionNullDataObject")
}

func writeUnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes(r UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumDouble:
		return writeDouble(r.Double, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumFloat:
		return writeFloat(r.Float, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumInt:
		return writeInt(r.Int, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumLong:
		return writeLong(r.Long, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumString:
		return writeString(r.String, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumArrayOfDouble:
		return writeArrayOfDouble(r.ArrayOfDouble, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumBool:
		return writeBool(r.Bool, w)
	case UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytesTypeEnumBytes:
		return writeBytes(r.Bytes, w)

	}
	return fmt.Errorf("Invalid value for UnionNullDoubleFloatIntLongStringArrayOfDoubleBoolBytes")
}

func writeUnionNullIntLong(r UnionNullIntLong, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullIntLongTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullIntLongTypeEnumInt:
		return writeInt(r.Int, w)
	case UnionNullIntLongTypeEnumLong:
		return writeLong(r.Long, w)

	}
	return fmt.Errorf("Invalid value for UnionNullIntLong")
}

func writeUnionNullLong(r UnionNullLong, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullLongTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullLongTypeEnumLong:
		return writeLong(r.Long, w)

	}
	return fmt.Errorf("Invalid value for UnionNullLong")
}

func writeUnionNullLongDouble(r UnionNullLongDouble, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullLongDoubleTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullLongDoubleTypeEnumLong:
		return writeLong(r.Long, w)
	case UnionNullLongDoubleTypeEnumDouble:
		return writeDouble(r.Double, w)

	}
	return fmt.Errorf("Invalid value for UnionNullLongDouble")
}

func writeUnionNullString(r UnionNullString, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullStringTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullStringTypeEnumString:
		return writeString(r.String, w)

	}
	return fmt.Errorf("Invalid value for UnionNullString")
}

func writeVersion(r *Version, w io.Writer) error {
	var err error
	err = writeInt(r.Major, w)
	if err != nil {
		return err
	}
	err = writeInt(r.Minor, w)
	if err != nil {
		return err
	}
	err = writeInt(r.Revision, w)
	if err != nil {
		return err
	}
	err = writeInt(r.Patch, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMLS_AddToStore(r *WMLS_AddToStore, w io.Writer) error {
	var err error
	err = writeString(r.WMLtypeIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.XMLin, w)
	if err != nil {
		return err
	}
	err = writeString(r.OptionsIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.CapabilitiesIn, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMLS_DeleteFromStore(r *WMLS_DeleteFromStore, w io.Writer) error {
	var err error
	err = writeString(r.WMLtypeIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.XMLin, w)
	if err != nil {
		return err
	}
	err = writeString(r.OptionsIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.CapabilitiesIn, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMLS_GetBaseMsg(r *WMLS_GetBaseMsg, w io.Writer) error {
	var err error
	err = writeInt(r.ReturnValueIn, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMLS_GetCap(r *WMLS_GetCap, w io.Writer) error {
	var err error
	err = writeString(r.OptionsIn, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMLS_GetFromStore(r *WMLS_GetFromStore, w io.Writer) error {
	var err error
	err = writeString(r.WMLtypeIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.XMLin, w)
	if err != nil {
		return err
	}
	err = writeString(r.OptionsIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.CapabilitiesIn, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMLS_GetVersion(r *WMLS_GetVersion, w io.Writer) error {
	//var err error

	return nil
}
func writeWMLS_UpdateInStore(r *WMLS_UpdateInStore, w io.Writer) error {
	var err error
	err = writeString(r.WMLtypeIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.XMLin, w)
	if err != nil {
		return err
	}
	err = writeString(r.OptionsIn, w)
	if err != nil {
		return err
	}
	err = writeString(r.CapabilitiesIn, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_AddToStoreResponse(r *WMSL_AddToStoreResponse, w io.Writer) error {
	var err error
	err = writeInt(r.Result, w)
	if err != nil {
		return err
	}
	err = writeString(r.SuppMsgOut, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_DeleteFromStoreResponse(r *WMSL_DeleteFromStoreResponse, w io.Writer) error {
	var err error
	err = writeInt(r.Result, w)
	if err != nil {
		return err
	}
	err = writeString(r.SuppMsgOut, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_GetBaseMsgResponse(r *WMSL_GetBaseMsgResponse, w io.Writer) error {
	var err error
	err = writeString(r.Result, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_GetCapResponse(r *WMSL_GetCapResponse, w io.Writer) error {
	var err error
	err = writeInt(r.Result, w)
	if err != nil {
		return err
	}
	err = writeString(r.CapabilitiesOut, w)
	if err != nil {
		return err
	}
	err = writeString(r.SuppMsgOut, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_GetFromStoreResponse(r *WMSL_GetFromStoreResponse, w io.Writer) error {
	var err error
	err = writeInt(r.Result, w)
	if err != nil {
		return err
	}
	err = writeString(r.XMLout, w)
	if err != nil {
		return err
	}
	err = writeString(r.SuppMsgOut, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_GetVersionResponse(r *WMSL_GetVersionResponse, w io.Writer) error {
	var err error
	err = writeString(r.Result, w)
	if err != nil {
		return err
	}

	return nil
}
func writeWMSL_UpdateInStoreResponse(r *WMSL_UpdateInStoreResponse, w io.Writer) error {
	var err error
	err = writeInt(r.Result, w)
	if err != nil {
		return err
	}
	err = writeString(r.SuppMsgOut, w)
	if err != nil {
		return err
	}

	return nil
}
