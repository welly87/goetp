package package1

import avro "gopkg.in/avro.v0"

type Version struct {
	Major    int32
	Minor    int32
	Revision int32
	Patch    int32
}

func NewVersion() *Version {
	return &Version{}
}

func (o *Version) Schema() avro.Schema {
	if _Version_schema_err != nil {
		panic(_Version_schema_err)
	}
	return _Version_schema
}

type ArrayOfDouble struct {
	Values []float64
}

func NewArrayOfDouble() *ArrayOfDouble {
	return &ArrayOfDouble{
		Values: make([]float64, 0),
	}
}

func (o *ArrayOfDouble) Schema() avro.Schema {
	if _ArrayOfDouble_schema_err != nil {
		panic(_ArrayOfDouble_schema_err)
	}
	return _ArrayOfDouble_schema
}

type DataValue struct {
	Item interface{}
}

func NewDataValue() *DataValue {
	return &DataValue{}
}

func (o *DataValue) Schema() avro.Schema {
	if _DataValue_schema_err != nil {
		panic(_DataValue_schema_err)
	}
	return _DataValue_schema
}

type SupportedProtocol struct {
	Protocol             int32
	ProtocolVersion      *Version
	Role                 string
	ProtocolCapabilities map[string]*DataValue
}

func NewSupportedProtocol() *SupportedProtocol {
	return &SupportedProtocol{
		ProtocolCapabilities: make(map[string]*DataValue),
	}
}

func (o *SupportedProtocol) Schema() avro.Schema {
	if _SupportedProtocol_schema_err != nil {
		panic(_SupportedProtocol_schema_err)
	}
	return _SupportedProtocol_schema
}

type RequestSession struct {
	ApplicationName    string
	ApplicationVersion string
	RequestedProtocols []*SupportedProtocol
	SupportedObjects   []string
}

func NewRequestSession() *RequestSession {
	return &RequestSession{
		RequestedProtocols: make([]*SupportedProtocol, 0),
		SupportedObjects:   make([]string, 0),
	}
}

func (o *RequestSession) Schema() avro.Schema {
	if _RequestSession_schema_err != nil {
		panic(_RequestSession_schema_err)
	}
	return _RequestSession_schema
}

type OpenSession struct {
	ApplicationName    string
	ApplicationVersion string
	SessionId          string
	SupportedProtocols []*SupportedProtocol
	SupportedObjects   []string
}

func NewOpenSession() *OpenSession {
	return &OpenSession{
		SupportedProtocols: make([]*SupportedProtocol, 0),
		SupportedObjects:   make([]string, 0),
	}
}

func (o *OpenSession) Schema() avro.Schema {
	if _OpenSession_schema_err != nil {
		panic(_OpenSession_schema_err)
	}
	return _OpenSession_schema
}

// Generated by codegen. Please do not modify.
var _Version_schema, _Version_schema_err = avro.ParseSchema(`{
    "type": "record",
    "namespace": "Energistics.Datatypes",
    "name": "Version",
    "fields": [
        {
            "name": "major",
            "type": "int"
        },
        {
            "name": "minor",
            "type": "int"
        },
        {
            "name": "revision",
            "type": "int"
        },
        {
            "name": "patch",
            "type": "int"
        }
    ]
}`)

// Generated by codegen. Please do not modify.
var _ArrayOfDouble_schema, _ArrayOfDouble_schema_err = avro.ParseSchema(`{
    "type": "record",
    "namespace": "Energistics.Datatypes",
    "name": "ArrayOfDouble",
    "fields": [
        {
            "name": "values",
            "type": {
                "type": "array",
                "items": "double"
            }
        }
    ]
}`)

// Generated by codegen. Please do not modify.
var _DataValue_schema, _DataValue_schema_err = avro.ParseSchema(`{
    "type": "record",
    "namespace": "Energistics.Datatypes",
    "name": "DataValue",
    "fields": [
        {
            "name": "item",
            "default": null,
            "type": [
                "null",
                "double",
                "float",
                "int",
                "long",
                "string",
                "ArrayOfDouble",
                "boolean",
                "bytes"
            ]
        }
    ]
}`)

// Generated by codegen. Please do not modify.
var _SupportedProtocol_schema, _SupportedProtocol_schema_err = avro.ParseSchema(`{
    "type": "record",
    "namespace": "Energistics.Datatypes",
    "name": "SupportedProtocol",
    "fields": [
        {
            "name": "protocol",
            "type": "int"
        },
        {
            "name": "protocolVersion",
            "type": "Version"
        },
        {
            "name": "role",
            "type": "string"
        },
        {
            "name": "protocolCapabilities",
            "type": {
                "type": "map",
                "values": "DataValue"
            }
        }
    ]
}`)

// Generated by codegen. Please do not modify.
var _RequestSession_schema, _RequestSession_schema_err = avro.ParseSchema(`{
    "type": "record",
    "namespace": "Energistics.Protocol.Core",
    "name": "RequestSession",
    "fields": [
        {
            "name": "applicationName",
            "type": "string"
        },
        {
            "name": "applicationVersion",
            "type": "string"
        },
        {
            "name": "requestedProtocols",
            "type": {
                "type": "array",
                "items": "SupportedProtocol"
            }
        },
        {
            "name": "supportedObjects",
            "type": {
                "type": "array",
                "items": "string"
            }
        }
    ]
}`)

// Generated by codegen. Please do not modify.
var _OpenSession_schema, _OpenSession_schema_err = avro.ParseSchema(`{
    "type": "record",
    "namespace": "Energistics.Protocol.Core",
    "name": "OpenSession",
    "fields": [
        {
            "name": "applicationName",
            "type": "string"
        },
        {
            "name": "applicationVersion",
            "type": "string"
        },
        {
            "name": "sessionId",
            "type": "string"
        },
        {
            "name": "supportedProtocols",
            "type": {
                "type": "array",
                "items": "SupportedProtocol"
            }
        },
        {
            "name": "supportedObjects",
            "type": {
                "type": "array",
                "items": "string"
            }
        }
    ]
}`)
